{
    "name": "ExecutePowerShellScript",
    "properties": {
        "description": "Pipeline to execute PowerShell script with SQL operations using Managed Identity",
        "activities": [
            {
                "name": "RunPowerShellWithSQL",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 2,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "PowerShell",
                            "text": "param(\n    [string]$SqlServer,\n    [string]$DatabaseName,\n    [string]$TableName\n)\n\n# PowerShell script to connect to SQL using Managed Identity\n$ErrorActionPreference = 'Stop'\n\ntry {\n    Write-Output \"Starting PowerShell script execution...\"\n    Write-Output \"Target: Server=$SqlServer, Database=$DatabaseName, Table=$TableName\"\n    \n    # Connection string using Managed Identity\n    $connectionString = \"Server=$SqlServer;Database=$DatabaseName;Authentication=Active Directory Managed Identity;Encrypt=True;TrustServerCertificate=False;\"\n    \n    Write-Output \"Connecting to SQL Database using Managed Identity...\"\n    $connection = New-Object System.Data.SqlClient.SqlConnection($connectionString)\n    $connection.Open()\n    Write-Output \"Successfully connected to SQL Database!\"\n    \n    # Example: Get record count\n    $countQuery = \"SELECT COUNT(*) as RecordCount FROM [$TableName]\"\n    $countCommand = New-Object System.Data.SqlClient.SqlCommand($countQuery, $connection)\n    $recordCount = $countCommand.ExecuteScalar()\n    Write-Output \"Current record count in $TableName: $recordCount\"\n    \n    # Example: Insert a test record with timestamp\n    $insertQuery = \"INSERT INTO [$TableName] (Column1, Column2, ProcessedDate) VALUES ('ADF-PowerShell', 'ManagedIdentity', GETDATE())\"\n    $insertCommand = New-Object System.Data.SqlClient.SqlCommand($insertQuery, $connection)\n    $rowsAffected = $insertCommand.ExecuteNonQuery()\n    Write-Output \"Inserted $rowsAffected record(s) successfully\"\n    \n    # Example: Update existing records\n    $updateQuery = \"UPDATE [$TableName] SET LastUpdated = GETDATE() WHERE Column1 = 'ADF-PowerShell'\"\n    $updateCommand = New-Object System.Data.SqlClient.SqlCommand($updateQuery, $connection)\n    $updatedRows = $updateCommand.ExecuteNonQuery()\n    Write-Output \"Updated $updatedRows record(s)\"\n    \n    # Close connection\n    $connection.Close()\n    Write-Output \"Connection closed successfully\"\n    Write-Output \"PowerShell script completed successfully!\"\n}\ncatch {\n    Write-Error \"Error occurred: $($_.Exception.Message)\"\n    if ($connection -and $connection.State -eq 'Open') {\n        $connection.Close()\n    }\n    throw\n}",
                            "parameters": [
                                {
                                    "name": "SqlServer",
                                    "type": "String",
                                    "value": {
                                        "value": "@pipeline().parameters.SqlServer",
                                        "type": "Expression"
                                    }
                                },
                                {
                                    "name": "DatabaseName",
                                    "type": "String",
                                    "value": {
                                        "value": "@pipeline().parameters.DatabaseName",
                                        "type": "Expression"
                                    }
                                },
                                {
                                    "name": "TableName",
                                    "type": "String",
                                    "value": {
                                        "value": "@pipeline().parameters.TableName",
                                        "type": "Expression"
                                    }
                                }
                            ]
                        }
                    ],
                    "scriptBlockExecutionTimeout": "02:00:00"
                }
            }
        ],
        "parameters": {
            "SqlServer": {
                "type": "string",
                "defaultValue": "sqldemo-12345.database.windows.net"
            },
            "DatabaseName": {
                "type": "string",
                "defaultValue": "TestDatabase"
            },
            "TableName": {
                "type": "string",
                "defaultValue": "TestTable"
            }
        },
        "annotations": [],
        "lastPublishTime": "2025-10-31T12:00:00Z"
    }
}
