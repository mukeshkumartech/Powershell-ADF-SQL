{
    "name": "ExecutePowerShellScript",
    "properties": {
        "activities": [
            {
                "name": "RunPowerShellWithSQL",
                "type": "Script",
                "dependsOn": [],
                "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 2,
                    "retryIntervalInSeconds": 30
                },
                "typeProperties": {
                    "scripts": [
                        {
                            "type": "PowerShell",
                            "text": "# PowerShell script to connect to SQL using Managed Identity\n$ErrorActionPreference = 'Stop'\n\n# Configuration values\n$SqlServer = 'sqldemo-12345.database.windows.net'\n$DatabaseName = 'TestDatabase' \n$TableName = 'TestTable'\n\ntry {\n    Write-Output \"Starting PowerShell script execution...\"\n    Write-Output \"Target: Server=$SqlServer, Database=$DatabaseName, Table=$TableName\"\n    \n    # Connection string using Managed Identity\n    $connectionString = \"Server=$SqlServer;Database=$DatabaseName;Authentication=Active Directory Managed Identity;Encrypt=True;TrustServerCertificate=False;\"\n    \n    Write-Output \"Connecting to SQL Database using Managed Identity...\"\n    $connection = New-Object System.Data.SqlClient.SqlConnection($connectionString)\n    $connection.Open()\n    Write-Output \"Successfully connected to SQL Database!\"\n    \n    # Test query\n    $testQuery = \"SELECT 1 as TestResult, GETDATE() as CurrentTime\"\n    $testCommand = New-Object System.Data.SqlClient.SqlCommand($testQuery, $connection)\n    $testResult = $testCommand.ExecuteScalar()\n    Write-Output \"Test query result: $testResult\"\n    \n    # Close connection\n    $connection.Close()\n    Write-Output \"Connection closed successfully\"\n    Write-Output \"PowerShell script completed successfully!\"\n}\ncatch {\n    Write-Error \"Error occurred: $($_.Exception.Message)\"\n    if ($connection -and $connection.State -eq 'Open') {\n        $connection.Close()\n    }\n    throw\n}"
                        }
                    ],
                    "linkedService": {
                        "referenceName": "AutoResolveIntegrationRuntime",
                        "type": "IntegrationRuntimeReference"
                    }
                }
            }
        ]
    }
}
